/**
 * Imperium 4X (Shared) - Parser
 * ===
 *
 * @module parser
 */

////////////////////////////////////////////////////////////////////////////////
// Imports
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Definitions
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Class
////////////////////////////////////////////////////////////////////////////////
class Parser {

  //////////////////////////////////////////////////////////////////////////////
  // Private Properties
  //////////////////////////////////////////////////////////////////////////////
  _templates;

  //////////////////////////////////////////////////////////////////////////////
  // Public Properties
  //////////////////////////////////////////////////////////////////////////////
  constructor() {
    this._templates = {};
  }

  addTemplate(name, template){
    this._templates[name] = template;
  }s

  parseTemplate(template){
    let self = this;
    const PARSER = new DOMParser();
    let doc = PARSER.parseFromString(template, 'text/html');
    for (let key in this._templates){
      let elems = doc.getElementsByTagName(key);
      for(let idx = 0; idx < elems.length; idx++){
        //let child = PARSER.parseFromString(this._templates[key], 'text/html');
        let child = this.parseTemplate(this._templates[key]);
        let elem = child.body.firstChild;
        elems[idx].append(elem);
      }
    }
    return doc;
  }

}

////////////////////////////////////////////////////////////////////////////////
// Exports
////////////////////////////////////////////////////////////////////////////////
export default Parser;
/**
 * Framework - event
 * ===
 *
 * @module event
 */

////////////////////////////////////////////////////////////////////////////////
// Imports
////////////////////////////////////////////////////////////////////////////////
import Message from '../message/message';

////////////////////////////////////////////////////////////////////////////////
// Definitions
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Class
////////////////////////////////////////////////////////////////////////////////
/**
 * Event
 * @class
 */
class Event extends Message {

  //////////////////////////////////////////////////////////////////////////////
  // Private Properties
  //////////////////////////////////////////////////////////////////////////////
  /**
   * The time the event was sent
   * @type {int}
   */
  _sentAt;

  /**
   * The time the event occurs
   * @type {int}
   */
  _occursIn;

  /**
   * If the event repeats itself
   * @type {boolean}
   */
  _repeat;
  //////////////////////////////////////////////////////////////////////////////
  // Public Properties
  //////////////////////////////////////////////////////////////////////////////

  get sentAt() {
    return this._sentAt;
  }

  get occursIn() {
    return this._occursIn;
  }

  get repeat() {
    return this._repeat;
  }

  /**
   * Event
   * @constructor
   */
  constructor(sender, recipient, subject, body, sentAt, occursIn, repeat) {
    super(sender, recipient, subject, body);
    this._sentAt = sentAt;
    this._occursIn = occursIn;
    this._repeat = repeat;
  }

  //////////////////////////////////////////////////////////////////////////////
  // Public Methods
  //////////////////////////////////////////////////////////////////////////////

  //////////////////////////////////////////////////////////////////////////////
  // Private Methods
  //////////////////////////////////////////////////////////////////////////////

  //////////////////////////////////////////////////////////////////////////////
  // Static Methods
  //////////////////////////////////////////////////////////////////////////////
  static create(data) {
    return new Event(data.sender, data.recipient, data.subject, data.body, data.sentAt, data.occursIn, data.repeat);
  }

}

////////////////////////////////////////////////////////////////////////////////
// Exports
////////////////////////////////////////////////////////////////////////////////
export default Event;

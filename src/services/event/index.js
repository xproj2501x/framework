/**
 * Framework - Event Service
 * ===
 *
 * @module eventService
 */

////////////////////////////////////////////////////////////////////////////////
// Imports
////////////////////////////////////////////////////////////////////////////////
import MessageService from '../message';

////////////////////////////////////////////////////////////////////////////////
// Definitions
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Class
////////////////////////////////////////////////////////////////////////////////
/**
 * EventService
 * @class
 * @extends {module:messageService}
 * @memberof module:eventService
 */
class EventService extends MessageService{

  //////////////////////////////////////////////////////////////////////////////
  // Private Properties
  //////////////////////////////////////////////////////////////////////////////
  _eventQueue;
  _bouncedEvents;

  //////////////////////////////////////////////////////////////////////////////
  // Public Properties
  //////////////////////////////////////////////////////////////////////////////

  /**
   * EventService
   * @constructor
   */
  constructor() {
    super();
    this._eventQueue = [];
    this._bouncedEvents = [];
  }

  ////////////////////////////////////////////////////////////////////////////////
  // Public Methods
  ////////////////////////////////////////////////////////////////////////////////
  publish(event) {
    this._enqueueEvent(event);
  }

  /**
   *
   * @param {int} tick
   */
  send(tick) {
    this._sort();
    while (this._getNextEventTime() === tick) {
      const MESSAGE = this._dequeueEvent();


    }
  }
  ////////////////////////////////////////////////////////////////////////////////
  // Private Methods
  ////////////////////////////////////////////////////////////////////////////////
  _enqueueEvent(event) {
    this._eventQueue.push(event);
  }

  _dequeueEvent() {
    return this._eventQueue.shift(event);
  }

  _peek() {
    return this._eventQueue[0];
  }

  _getNextEventTime() {
    const EVENT = this._eventQueue[0];

    return EVENT.sentAt + EVENT.occursIn;
  }

  _sort() {
    this._eventQueue = this._eventQueue.sort((event1, event2) => {
      const TIME1 = event1.sentAt + event1.occursIn;
      const TIME2 = event2.sentAt + event2.occursIn;

      return TIME1 - TIME2;
    });
  }
  ////////////////////////////////////////////////////////////////////////////////
  // Static Methods
  ////////////////////////////////////////////////////////////////////////////////
  /**
   * Static factory method
   * @return {module:eventService.EventService}
   */
  static create() {
    return new EventService();
  }
}

////////////////////////////////////////////////////////////////////////////////
// Exports
////////////////////////////////////////////////////////////////////////////////
export default EventService;
